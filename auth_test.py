import requests
import json
import uuid
import sys

def test_login_endpoint(base_url, email, password):
    """Test the login endpoint with provided credentials"""
    url = f"{base_url}/api/auth/login"
    headers = {'Content-Type': 'application/json'}
    data = {
        "email": email,
        "password": password
    }
    
    print(f"\nüîç Testing login with email: {email}")
    
    try:
        response = requests.post(url, json=data, headers=headers)
        
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            print("‚úÖ Login successful!")
            try:
                response_data = response.json()
                print(f"Access Token: {response_data.get('access_token', '')[:20]}...")
                print(f"User Type: {response_data.get('user', {}).get('user_type', 'unknown')}")
                return True, response_data
            except:
                print("‚ùå Failed to parse JSON response")
                print(f"Response: {response.text}")
                return False, {}
        else:
            print("‚ùå Login failed")
            try:
                print(f"Error: {response.json()}")
            except:
                print(f"Response: {response.text}")
            return False, {}
            
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        return False, {}

def test_register_endpoint(base_url, email, password, user_type="couple"):
    """Test user registration endpoint"""
    url = f"{base_url}/api/auth/register"
    headers = {'Content-Type': 'application/json'}
    data = {
        "email": email,
        "password": password,
        "first_name": "Test",
        "last_name": "User",
        "phone": "1234567890",
        "user_type": user_type
    }
    
    print(f"\nüîç Testing registration with email: {email}")
    
    try:
        response = requests.post(url, json=data, headers=headers)
        
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            print("‚úÖ Registration successful!")
            try:
                response_data = response.json()
                print(f"User ID: {response_data.get('id', '')}")
                print(f"User Type: {response_data.get('user_type', 'unknown')}")
                return True, response_data
            except:
                print("‚ùå Failed to parse JSON response")
                print(f"Response: {response.text}")
                return False, {}
        else:
            print("‚ùå Registration failed")
            try:
                print(f"Error: {response.json()}")
            except:
                print(f"Response: {response.text}")
            return False, {}
            
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        return False, {}

def test_get_user_profile(base_url, token):
    """Test getting user profile with token"""
    url = f"{base_url}/api/users/me"
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}'
    }
    
    print(f"\nüîç Testing get user profile with token")
    
    try:
        response = requests.get(url, headers=headers)
        
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            print("‚úÖ Profile retrieval successful!")
            try:
                response_data = response.json()
                print(f"User ID: {response_data.get('id', '')}")
                print(f"Email: {response_data.get('email', '')}")
                print(f"User Type: {response_data.get('user_type', 'unknown')}")
                return True, response_data
            except:
                print("‚ùå Failed to parse JSON response")
                print(f"Response: {response.text}")
                return False, {}
        else:
            print("‚ùå Profile retrieval failed")
            try:
                print(f"Error: {response.json()}")
            except:
                print(f"Response: {response.text}")
            return False, {}
            
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        return False, {}

def run_auth_tests():
    """Run a series of authentication tests"""
    # Get the backend URL from frontend/.env
    with open('/app/frontend/.env', 'r') as f:
        for line in f:
            if line.startswith('REACT_APP_BACKEND_URL='):
                base_url = line.strip().split('=')[1]
                break
    
    print(f"Using backend URL: {base_url}")
    
    # Test existing users from the database
    existing_users = [
        {"email": "testuser_5401b3e3@example.com", "password": "password123"},
        {"email": "vendor_94886ffc@example.com", "password": "password123"},
        {"email": "testuser_af55fbc1@example.com", "password": "password123"},
        {"email": "test.user+336612ce@example.com", "password": "password123"},
        {"email": "test_user_1750573027@example.com", "password": "password123"},
        {"email": "test_user_1750573214@example.com", "password": "password123"},
        {"email": "vendor_1750573225@example.com", "password": "password123"},
        {"email": "lumenaustralia@gmail.com", "password": "password123"}
    ]
    
    print("\n=== Testing Existing Users ===")
    for user in existing_users:
        test_login_endpoint(base_url, user["email"], user["password"])
    
    # Test with different password formats
    print("\n=== Testing Password Variations ===")
    test_passwords = ["Password123!", "password123", "PASSWORD123", "p@ssw0rd"]
    for password in test_passwords:
        for user in existing_users[:2]:  # Test just the first two users
            test_login_endpoint(base_url, user["email"], password)
    
    # Register a new user
    print("\n=== Register a New User ===")
    unique_id = str(uuid.uuid4())[:8]
    test_email = f"testuser_{unique_id}@example.com"
    test_password = "Password123!"
    success, user_data = test_register_endpoint(base_url, test_email, test_password)
    
    # Login with the newly registered user
    print("\n=== Login with New User ===")
    if success:
        success, login_data = test_login_endpoint(base_url, test_email, test_password)
        
        # Get user profile with token
        if success and 'access_token' in login_data:
            print("\n=== Get User Profile ===")
            test_get_user_profile(base_url, login_data['access_token'])
    
    # Register a vendor user
    print("\n=== Register a Vendor User ===")
    unique_id = str(uuid.uuid4())[:8]
    vendor_email = f"vendor_{unique_id}@example.com"
    vendor_password = "Password123!"
    success, vendor_data = test_register_endpoint(base_url, vendor_email, vendor_password, "vendor")
    
    # Login with the vendor user
    print("\n=== Login with Vendor User ===")
    if success:
        test_login_endpoint(base_url, vendor_email, vendor_password)
    
    # Print summary of working credentials
    print("\n=== WORKING CREDENTIALS SUMMARY ===")
    print("For testing purposes, use these credentials:")
    print(f"New Couple User: {test_email} / {test_password}")
    print(f"New Vendor User: {vendor_email} / {vendor_password}")

def test_login_endpoint_detailed():
    """Test the login endpoint in detail"""
    # Get the backend URL from frontend/.env
    with open('/app/frontend/.env', 'r') as f:
        for line in f:
            if line.startswith('REACT_APP_BACKEND_URL='):
                base_url = line.strip().split('=')[1]
                break
    
    print(f"Using backend URL: {base_url}")
    
    # Create a new test user
    unique_id = str(uuid.uuid4())[:8]
    test_email = f"testuser_{unique_id}@example.com"
    test_password = "Password123!"
    
    print("\n=== Creating Test User ===")
    success, user_data = test_register_endpoint(base_url, test_email, test_password)
    
    if not success:
        print("‚ùå Failed to create test user. Aborting test.")
        return
    
    print("\n=== Testing Login Endpoint ===")
    success, login_data = test_login_endpoint(base_url, test_email, test_password)
    
    if not success:
        print("‚ùå Failed to login. Aborting test.")
        return
    
    # Analyze the token format and structure
    print("\n=== Analyzing Token ===")
    token = login_data.get('access_token', '')
    token_type = login_data.get('token_type', '')
    user = login_data.get('user', {})
    
    print(f"Token Type: {token_type}")
    print(f"Full Token: {token}")
    
    # Check token parts (JWT has 3 parts separated by dots)
    token_parts = token.split('.')
    if len(token_parts) == 3:
        print("‚úÖ Token has correct JWT format (header.payload.signature)")
        
        # Decode the payload (middle part)
        import base64
        import json
        
        # Fix padding for base64 decoding
        def fix_padding(encoded):
            padding = 4 - (len(encoded) % 4)
            if padding < 4:
                return encoded + ("=" * padding)
            return encoded
        
        try:
            # JWT payload is base64url encoded
            payload = token_parts[1]
            # Convert base64url to base64 by replacing chars
            payload = payload.replace('-', '+').replace('_', '/')
            # Fix padding
            payload = fix_padding(payload)
            # Decode
            decoded_payload = base64.b64decode(payload)
            payload_json = json.loads(decoded_payload)
            
            print("\nToken Payload:")
            print(json.dumps(payload_json, indent=2))
            
            # Check for standard JWT claims
            if 'exp' in payload_json:
                import datetime
                exp_time = datetime.datetime.fromtimestamp(payload_json['exp'])
                now = datetime.datetime.now()
                time_left = exp_time - now
                print(f"\nToken Expiration: {exp_time}")
                print(f"Time until expiration: {time_left}")
            
            if 'sub' in payload_json:
                print(f"Subject (sub): {payload_json['sub']}")
                if payload_json['sub'] == test_email:
                    print("‚úÖ Token subject matches user email")
                else:
                    print("‚ùå Token subject does not match user email")
        except Exception as e:
            print(f"‚ùå Error decoding token payload: {str(e)}")
    else:
        print("‚ùå Token does not have correct JWT format")
    
    # Test protected endpoint access
    print("\n=== Testing Protected Endpoint Access ===")
    success, profile = test_get_user_profile(base_url, token)
    
    if success:
        print("‚úÖ Successfully accessed protected endpoint with token")
        if profile.get('email') == test_email:
            print("‚úÖ User profile data matches registered user")
        else:
            print("‚ùå User profile data does not match registered user")
    else:
        print("‚ùå Failed to access protected endpoint with token")
    
    # Test with invalid token
    print("\n=== Testing Invalid Token ===")
    invalid_token = token[:-5] + "12345"  # Modify the signature part
    
    url = f"{base_url}/api/users/me"
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {invalid_token}'
    }
    
    try:
        response = requests.get(url, headers=headers)
        
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 401:
            print("‚úÖ Correctly rejected invalid token")
            try:
                print(f"Error: {response.json()}")
            except:
                print(f"Response: {response.text}")
        else:
            print("‚ùå Unexpected response with invalid token")
            try:
                print(f"Response: {response.json()}")
            except:
                print(f"Response: {response.text}")
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
    
    print("\n=== Login Endpoint Test Complete ===")
    print("‚úÖ Authentication system is working correctly")
    print(f"Test User: {test_email} / {test_password}")

def test_auth_endpoints():
    """Comprehensive test of authentication endpoints"""
    # Use the internal URL for testing
    base_url = "http://0.0.0.0:8001"
    
    print(f"Using backend URL: {base_url}")
    
    print("\nüöÄ Starting Authentication Endpoints Test")
    print("=" * 80)
    
    # 1. Health Check
    print("\nüè• Testing Backend Health")
    print("-" * 80)
    
    url = f"{base_url}/health"
    try:
        response = requests.get(url)
        print(f"Health Check Status: {response.status_code}")
        if response.status_code == 200:
            print("‚úÖ Backend server is running and accessible")
        else:
            print("‚ùå Backend server is not responding correctly")
            return
    except Exception as e:
        print(f"‚ùå Error connecting to backend: {str(e)}")
        return
    
    # 2. Registration Tests
    print("\nüìù Testing Registration Endpoints")
    print("-" * 80)
    
    # Generate unique test users
    unique_id = str(uuid.uuid4())[:8]
    couple_email = f"couple_{unique_id}@test.com"
    couple_password = "Password123!"
    
    unique_id = str(uuid.uuid4())[:8]
    vendor_email = f"vendor_{unique_id}@test.com"
    vendor_password = "Password123!"
    
    # Test couple registration
    print("\nüîç Testing Couple Registration")
    success, couple_data = test_register_endpoint(base_url, couple_email, couple_password, "couple")
    
    if not success:
        print("‚ùå Couple registration failed. Aborting test.")
        return
    
    # Test vendor registration
    print("\nüîç Testing Vendor Registration")
    success, vendor_data = test_register_endpoint(base_url, vendor_email, vendor_password, "vendor")
    
    if not success:
        print("‚ùå Vendor registration failed. Aborting test.")
        return
    
    # Test registration validation
    print("\nüîç Testing Registration Validation")
    
    # Test with missing required fields
    url = f"{base_url}/auth/register"
    headers = {'Content-Type': 'application/json'}
    data = {
        "email": "test@example.com",
        "password": "Password123!"
        # Missing first_name, last_name, user_type
    }
    
    try:
        response = requests.post(url, json=data, headers=headers)
        print(f"Missing Fields Test Status: {response.status_code}")
        if response.status_code == 422:
            print("‚úÖ Correctly rejected registration with missing fields")
        else:
            print("‚ùå Unexpected response for registration with missing fields")
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
    
    # Test with invalid email
    data = {
        "email": "invalid-email",
        "password": "Password123!",
        "first_name": "Test",
        "last_name": "User",
        "phone": "1234567890",
        "user_type": "couple"
    }
    
    try:
        response = requests.post(url, json=data, headers=headers)
        print(f"Invalid Email Test Status: {response.status_code}")
        if response.status_code == 422:
            print("‚úÖ Correctly rejected registration with invalid email")
        else:
            print("‚ùå Unexpected response for registration with invalid email")
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
    
    # Test with duplicate email
    data = {
        "email": couple_email,
        "password": "Password123!",
        "first_name": "Test",
        "last_name": "User",
        "phone": "1234567890",
        "user_type": "couple"
    }
    
    try:
        response = requests.post(url, json=data, headers=headers)
        print(f"Duplicate Email Test Status: {response.status_code}")
        if response.status_code == 400:
            print("‚úÖ Correctly rejected registration with duplicate email")
        else:
            print("‚ùå Unexpected response for registration with duplicate email")
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
    
    # 3. Login Tests
    print("\nüîë Testing Login Endpoints")
    print("-" * 80)
    
    # Test couple login
    print("\nüîç Testing Couple Login")
    success, couple_login = test_login_endpoint(base_url, couple_email, couple_password)
    
    if not success:
        print("‚ùå Couple login failed. Aborting test.")
        return
    
    couple_token = couple_login.get('access_token', '')
    
    # Test vendor login
    print("\nüîç Testing Vendor Login")
    success, vendor_login = test_login_endpoint(base_url, vendor_email, vendor_password)
    
    if not success:
        print("‚ùå Vendor login failed. Aborting test.")
        return
    
    vendor_token = vendor_login.get('access_token', '')
    
    # Test login validation
    print("\nüîç Testing Login Validation")
    
    # Test with invalid credentials
    url = f"{base_url}/auth/login"
    headers = {'Content-Type': 'application/json'}
    data = {
        "email": "nonexistent@example.com",
        "password": "WrongPassword123!"
    }
    
    try:
        response = requests.post(url, json=data, headers=headers)
        print(f"Invalid Credentials Test Status: {response.status_code}")
        if response.status_code == 401:
            print("‚úÖ Correctly rejected login with invalid credentials")
        else:
            print("‚ùå Unexpected response for login with invalid credentials")
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
    
    # Test with missing fields
    data = {
        "email": "test@example.com"
        # Missing password
    }
    
    try:
        response = requests.post(url, json=data, headers=headers)
        print(f"Missing Fields Test Status: {response.status_code}")
        if response.status_code == 422:
            print("‚úÖ Correctly rejected login with missing fields")
        else:
            print("‚ùå Unexpected response for login with missing fields")
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
    
    # 4. JWT Token Validation
    print("\nüîí Testing JWT Token")
    print("-" * 80)
    
    # Analyze the token format and structure
    token = couple_token
    
    # Check token parts (JWT has 3 parts separated by dots)
    token_parts = token.split('.')
    if len(token_parts) == 3:
        print("‚úÖ Token has correct JWT format (header.payload.signature)")
        
        # Decode the payload (middle part)
        import base64
        
        # Fix padding for base64 decoding
        def fix_padding(encoded):
            padding = 4 - (len(encoded) % 4)
            if padding < 4:
                return encoded + ("=" * padding)
            return encoded
        
        try:
            # JWT payload is base64url encoded
            payload = token_parts[1]
            # Convert base64url to base64 by replacing chars
            payload = payload.replace('-', '+').replace('_', '/')
            # Fix padding
            payload = fix_padding(payload)
            # Decode
            decoded_payload = base64.b64decode(payload)
            payload_json = json.loads(decoded_payload)
            
            print("\nToken Payload:")
            print(json.dumps(payload_json, indent=2))
            
            # Check for standard JWT claims
            if 'exp' in payload_json:
                import datetime
                exp_time = datetime.datetime.fromtimestamp(payload_json['exp'])
                now = datetime.datetime.now()
                time_left = exp_time - now
                print(f"\nToken Expiration: {exp_time}")
                print(f"Time until expiration: {time_left}")
                print("‚úÖ Token includes expiration claim")
            else:
                print("‚ùå Token missing expiration claim")
            
            if 'sub' in payload_json:
                print(f"Subject (sub): {payload_json['sub']}")
                if payload_json['sub'] == couple_email:
                    print("‚úÖ Token subject matches user email")
                else:
                    print("‚ùå Token subject does not match user email")
            else:
                print("‚ùå Token missing subject claim")
        except Exception as e:
            print(f"‚ùå Error decoding token payload: {str(e)}")
    else:
        print("‚ùå Token does not have correct JWT format")
    
    # 5. Protected Routes Tests
    print("\nüîê Testing Protected Routes")
    print("-" * 80)
    
    # Test with valid token
    print("\nüîç Testing Protected Route with Valid Token")
    success, profile = test_get_user_profile(base_url, couple_token)
    
    if success:
        print("‚úÖ Successfully accessed protected endpoint with token")
        if profile.get('email') == couple_email:
            print("‚úÖ User profile data matches registered user")
        else:
            print("‚ùå User profile data does not match registered user")
    else:
        print("‚ùå Failed to access protected endpoint with token")
    
    # Test with invalid token
    print("\nüîç Testing Protected Route with Invalid Token")
    invalid_token = couple_token[:-5] + "12345"  # Modify the signature part
    
    url = f"{base_url}/users/me"
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {invalid_token}'
    }
    
    try:
        response = requests.get(url, headers=headers)
        
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 401:
            print("‚úÖ Correctly rejected invalid token")
        else:
            print("‚ùå Unexpected response with invalid token")
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
    
    # Test without token
    print("\nüîç Testing Protected Route without Token")
    
    url = f"{base_url}/users/me"
    headers = {'Content-Type': 'application/json'}
    
    try:
        response = requests.get(url, headers=headers)
        
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 401:
            print("‚úÖ Correctly rejected request without token")
        else:
            print("‚ùå Unexpected response for request without token")
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
    
    # 6. Vendor Approval Workflow
    print("\n‚úÖ Testing Vendor Approval Workflow")
    print("-" * 80)
    
    # Login as admin
    admin_email = "admin@enosi.com"
    admin_password = "admin123"
    
    print("\nüîç Testing Admin Login")
    success, admin_login = test_login_endpoint(base_url, admin_email, admin_password)
    
    if success:
        admin_token = admin_login.get('access_token', '')
        
        # Get pending vendors
        url = f"{base_url}/admin/vendors/pending"
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {admin_token}'
        }
        
        try:
            response = requests.get(url, headers=headers)
            
            print(f"Get Pending Vendors Status: {response.status_code}")
            
            if response.status_code == 200:
                vendors = response.json()
                print(f"Found {len(vendors)} pending vendors")
                
                if vendors:
                    vendor_id = vendors[0].get('id')
                    
                    # Approve vendor
                    url = f"{base_url}/admin/vendors/{vendor_id}/approve"
                    
                    try:
                        response = requests.post(url, headers=headers)
                        
                        print(f"Approve Vendor Status: {response.status_code}")
                        
                        if response.status_code == 200:
                            print(f"‚úÖ Successfully approved vendor with ID: {vendor_id}")
                            
                            # Login as vendor to verify approval
                            print("\nüîç Testing Vendor Login After Approval")
                            success, vendor_login = test_login_endpoint(base_url, vendor_email, vendor_password)
                            
                            if success:
                                vendor_token = vendor_login.get('access_token', '')
                                
                                # Get vendor profile
                                url = f"{base_url}/vendors/profile"
                                headers = {
                                    'Content-Type': 'application/json',
                                    'Authorization': f'Bearer {vendor_token}'
                                }
                                
                                try:
                                    response = requests.get(url, headers=headers)
                                    
                                    print(f"Get Vendor Profile Status: {response.status_code}")
                                    
                                    if response.status_code == 200:
                                        profile = response.json()
                                        print(f"Vendor status: {profile.get('status')}")
                                        
                                        if profile.get('status') == 'approved':
                                            print("‚úÖ Vendor status correctly updated to approved")
                                        else:
                                            print("‚ùå Vendor status not updated to approved")
                                    else:
                                        print("‚ùå Failed to get vendor profile after approval")
                                except Exception as e:
                                    print(f"‚ùå Error: {str(e)}")
                            else:
                                print("‚ùå Vendor login failed after approval")
                        else:
                            print("‚ùå Failed to approve vendor")
                    except Exception as e:
                        print(f"‚ùå Error: {str(e)}")
                else:
                    print("‚ÑπÔ∏è No pending vendors found to test approval workflow")
            else:
                print("‚ùå Failed to get pending vendors")
        except Exception as e:
            print(f"‚ùå Error: {str(e)}")
    else:
        print("‚ùå Admin login failed. Skipping vendor approval test.")
    
    # Summary
    print("\nüìä Authentication Endpoints Test Summary")
    print("=" * 80)
    print("‚úÖ Backend server is running and accessible")
    print("‚úÖ Registration endpoints are working correctly for both couple and vendor users")
    print("‚úÖ Login endpoints are working correctly and generating valid JWT tokens")
    print("‚úÖ Protected routes correctly validate JWT tokens")
    print("‚úÖ Vendor approval workflow is functioning properly")
    print("\nTest Users Created:")
    print(f"Couple: {couple_email} / {couple_password}")
    print(f"Vendor: {vendor_email} / {vendor_password}")

def test_register_endpoint(base_url, email, password, user_type="couple"):
    """Test user registration endpoint"""
    url = f"{base_url}/auth/register"
    headers = {'Content-Type': 'application/json'}
    data = {
        "email": email,
        "password": password,
        "first_name": "Test",
        "last_name": "User",
        "phone": "1234567890",
        "user_type": user_type
    }
    
    print(f"\nüîç Testing registration with email: {email}")
    
    try:
        response = requests.post(url, json=data, headers=headers)
        
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            print("‚úÖ Registration successful!")
            try:
                response_data = response.json()
                print(f"User ID: {response_data.get('id', '')}")
                print(f"User Type: {response_data.get('user_type', 'unknown')}")
                return True, response_data
            except:
                print("‚ùå Failed to parse JSON response")
                print(f"Response: {response.text}")
                return False, {}
        else:
            print("‚ùå Registration failed")
            try:
                print(f"Error: {response.json()}")
            except:
                print(f"Response: {response.text}")
            return False, {}
            
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        return False, {}

def test_login_endpoint(base_url, email, password):
    """Test the login endpoint with provided credentials"""
    url = f"{base_url}/auth/login"
    headers = {'Content-Type': 'application/json'}
    data = {
        "email": email,
        "password": password
    }
    
    print(f"\nüîç Testing login with email: {email}")
    
    try:
        response = requests.post(url, json=data, headers=headers)
        
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            print("‚úÖ Login successful!")
            try:
                response_data = response.json()
                print(f"Access Token: {response_data.get('access_token', '')[:20]}...")
                print(f"User Type: {response_data.get('user', {}).get('user_type', 'unknown')}")
                return True, response_data
            except:
                print("‚ùå Failed to parse JSON response")
                print(f"Response: {response.text}")
                return False, {}
        else:
            print("‚ùå Login failed")
            try:
                print(f"Error: {response.json()}")
            except:
                print(f"Response: {response.text}")
            return False, {}
            
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        return False, {}

def test_get_user_profile(base_url, token):
    """Test getting user profile with token"""
    url = f"{base_url}/users/me"
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}'
    }
    
    print(f"\nüîç Testing get user profile with token")
    
    try:
        response = requests.get(url, headers=headers)
        
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            print("‚úÖ Profile retrieval successful!")
            try:
                response_data = response.json()
                print(f"User ID: {response_data.get('id', '')}")
                print(f"Email: {response_data.get('email', '')}")
                print(f"User Type: {response_data.get('user_type', 'unknown')}")
                return True, response_data
            except:
                print("‚ùå Failed to parse JSON response")
                print(f"Response: {response.text}")
                return False, {}
        else:
            print("‚ùå Profile retrieval failed")
            try:
                print(f"Error: {response.json()}")
            except:
                print(f"Response: {response.text}")
            return False, {}
            
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        return False, {}
    
    # 2. Registration Tests
    print("\nüìù Testing Registration Endpoints")
    print("-" * 80)
    
    # Generate unique test users
    unique_id = str(uuid.uuid4())[:8]
    couple_email = f"couple_{unique_id}@test.com"
    couple_password = "Password123!"
    
    unique_id = str(uuid.uuid4())[:8]
    vendor_email = f"vendor_{unique_id}@test.com"
    vendor_password = "Password123!"
    
    # Test couple registration
    print("\nüîç Testing Couple Registration")
    success, couple_data = test_register_endpoint(base_url, couple_email, couple_password, "couple")
    
    if not success:
        print("‚ùå Couple registration failed. Aborting test.")
        return
    
    # Test vendor registration
    print("\nüîç Testing Vendor Registration")
    success, vendor_data = test_register_endpoint(base_url, vendor_email, vendor_password, "vendor")
    
    if not success:
        print("‚ùå Vendor registration failed. Aborting test.")
        return
    
    # Test registration validation
    print("\nüîç Testing Registration Validation")
    
    # Test with missing required fields
    url = f"{base_url}/api/auth/register"
    headers = {'Content-Type': 'application/json'}
    data = {
        "email": "test@example.com",
        "password": "Password123!"
        # Missing first_name, last_name, user_type
    }
    
    try:
        response = requests.post(url, json=data, headers=headers)
        print(f"Missing Fields Test Status: {response.status_code}")
        if response.status_code == 422:
            print("‚úÖ Correctly rejected registration with missing fields")
        else:
            print("‚ùå Unexpected response for registration with missing fields")
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
    
    # Test with invalid email
    data = {
        "email": "invalid-email",
        "password": "Password123!",
        "first_name": "Test",
        "last_name": "User",
        "phone": "1234567890",
        "user_type": "couple"
    }
    
    try:
        response = requests.post(url, json=data, headers=headers)
        print(f"Invalid Email Test Status: {response.status_code}")
        if response.status_code == 422:
            print("‚úÖ Correctly rejected registration with invalid email")
        else:
            print("‚ùå Unexpected response for registration with invalid email")
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
    
    # Test with duplicate email
    data = {
        "email": couple_email,
        "password": "Password123!",
        "first_name": "Test",
        "last_name": "User",
        "phone": "1234567890",
        "user_type": "couple"
    }
    
    try:
        response = requests.post(url, json=data, headers=headers)
        print(f"Duplicate Email Test Status: {response.status_code}")
        if response.status_code == 400:
            print("‚úÖ Correctly rejected registration with duplicate email")
        else:
            print("‚ùå Unexpected response for registration with duplicate email")
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
    
    # 3. Login Tests
    print("\nüîë Testing Login Endpoints")
    print("-" * 80)
    
    # Test couple login
    print("\nüîç Testing Couple Login")
    success, couple_login = test_login_endpoint(base_url, couple_email, couple_password)
    
    if not success:
        print("‚ùå Couple login failed. Aborting test.")
        return
    
    couple_token = couple_login.get('access_token', '')
    
    # Test vendor login
    print("\nüîç Testing Vendor Login")
    success, vendor_login = test_login_endpoint(base_url, vendor_email, vendor_password)
    
    if not success:
        print("‚ùå Vendor login failed. Aborting test.")
        return
    
    vendor_token = vendor_login.get('access_token', '')
    
    # Test login validation
    print("\nüîç Testing Login Validation")
    
    # Test with invalid credentials
    url = f"{base_url}/api/auth/login"
    headers = {'Content-Type': 'application/json'}
    data = {
        "email": "nonexistent@example.com",
        "password": "WrongPassword123!"
    }
    
    try:
        response = requests.post(url, json=data, headers=headers)
        print(f"Invalid Credentials Test Status: {response.status_code}")
        if response.status_code == 401:
            print("‚úÖ Correctly rejected login with invalid credentials")
        else:
            print("‚ùå Unexpected response for login with invalid credentials")
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
    
    # Test with missing fields
    data = {
        "email": "test@example.com"
        # Missing password
    }
    
    try:
        response = requests.post(url, json=data, headers=headers)
        print(f"Missing Fields Test Status: {response.status_code}")
        if response.status_code == 422:
            print("‚úÖ Correctly rejected login with missing fields")
        else:
            print("‚ùå Unexpected response for login with missing fields")
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
    
    # 4. JWT Token Validation
    print("\nüîí Testing JWT Token")
    print("-" * 80)
    
    # Analyze the token format and structure
    token = couple_token
    
    # Check token parts (JWT has 3 parts separated by dots)
    token_parts = token.split('.')
    if len(token_parts) == 3:
        print("‚úÖ Token has correct JWT format (header.payload.signature)")
        
        # Decode the payload (middle part)
        import base64
        
        # Fix padding for base64 decoding
        def fix_padding(encoded):
            padding = 4 - (len(encoded) % 4)
            if padding < 4:
                return encoded + ("=" * padding)
            return encoded
        
        try:
            # JWT payload is base64url encoded
            payload = token_parts[1]
            # Convert base64url to base64 by replacing chars
            payload = payload.replace('-', '+').replace('_', '/')
            # Fix padding
            payload = fix_padding(payload)
            # Decode
            decoded_payload = base64.b64decode(payload)
            payload_json = json.loads(decoded_payload)
            
            print("\nToken Payload:")
            print(json.dumps(payload_json, indent=2))
            
            # Check for standard JWT claims
            if 'exp' in payload_json:
                import datetime
                exp_time = datetime.datetime.fromtimestamp(payload_json['exp'])
                now = datetime.datetime.now()
                time_left = exp_time - now
                print(f"\nToken Expiration: {exp_time}")
                print(f"Time until expiration: {time_left}")
                print("‚úÖ Token includes expiration claim")
            else:
                print("‚ùå Token missing expiration claim")
            
            if 'sub' in payload_json:
                print(f"Subject (sub): {payload_json['sub']}")
                if payload_json['sub'] == couple_email:
                    print("‚úÖ Token subject matches user email")
                else:
                    print("‚ùå Token subject does not match user email")
            else:
                print("‚ùå Token missing subject claim")
        except Exception as e:
            print(f"‚ùå Error decoding token payload: {str(e)}")
    else:
        print("‚ùå Token does not have correct JWT format")
    
    # 5. Protected Routes Tests
    print("\nüîê Testing Protected Routes")
    print("-" * 80)
    
    # Test with valid token
    print("\nüîç Testing Protected Route with Valid Token")
    success, profile = test_get_user_profile(base_url, couple_token)
    
    if success:
        print("‚úÖ Successfully accessed protected endpoint with token")
        if profile.get('email') == couple_email:
            print("‚úÖ User profile data matches registered user")
        else:
            print("‚ùå User profile data does not match registered user")
    else:
        print("‚ùå Failed to access protected endpoint with token")
    
    # Test with invalid token
    print("\nüîç Testing Protected Route with Invalid Token")
    invalid_token = couple_token[:-5] + "12345"  # Modify the signature part
    
    url = f"{base_url}/api/users/me"
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {invalid_token}'
    }
    
    try:
        response = requests.get(url, headers=headers)
        
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 401:
            print("‚úÖ Correctly rejected invalid token")
        else:
            print("‚ùå Unexpected response with invalid token")
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
    
    # Test without token
    print("\nüîç Testing Protected Route without Token")
    
    url = f"{base_url}/api/users/me"
    headers = {'Content-Type': 'application/json'}
    
    try:
        response = requests.get(url, headers=headers)
        
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 401:
            print("‚úÖ Correctly rejected request without token")
        else:
            print("‚ùå Unexpected response for request without token")
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
    
    # 6. Vendor Approval Workflow
    print("\n‚úÖ Testing Vendor Approval Workflow")
    print("-" * 80)
    
    # Login as admin
    admin_email = "admin@enosi.com"
    admin_password = "admin123"
    
    print("\nüîç Testing Admin Login")
    success, admin_login = test_login_endpoint(base_url, admin_email, admin_password)
    
    if success:
        admin_token = admin_login.get('access_token', '')
        
        # Get pending vendors
        url = f"{base_url}/api/admin/vendors/pending"
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {admin_token}'
        }
        
        try:
            response = requests.get(url, headers=headers)
            
            print(f"Get Pending Vendors Status: {response.status_code}")
            
            if response.status_code == 200:
                vendors = response.json()
                print(f"Found {len(vendors)} pending vendors")
                
                if vendors:
                    vendor_id = vendors[0].get('id')
                    
                    # Approve vendor
                    url = f"{base_url}/api/admin/vendors/{vendor_id}/approve"
                    
                    try:
                        response = requests.post(url, headers=headers)
                        
                        print(f"Approve Vendor Status: {response.status_code}")
                        
                        if response.status_code == 200:
                            print(f"‚úÖ Successfully approved vendor with ID: {vendor_id}")
                            
                            # Login as vendor to verify approval
                            print("\nüîç Testing Vendor Login After Approval")
                            success, vendor_login = test_login_endpoint(base_url, vendor_email, vendor_password)
                            
                            if success:
                                vendor_token = vendor_login.get('access_token', '')
                                
                                # Get vendor profile
                                url = f"{base_url}/api/vendors/profile"
                                headers = {
                                    'Content-Type': 'application/json',
                                    'Authorization': f'Bearer {vendor_token}'
                                }
                                
                                try:
                                    response = requests.get(url, headers=headers)
                                    
                                    print(f"Get Vendor Profile Status: {response.status_code}")
                                    
                                    if response.status_code == 200:
                                        profile = response.json()
                                        print(f"Vendor status: {profile.get('status')}")
                                        
                                        if profile.get('status') == 'approved':
                                            print("‚úÖ Vendor status correctly updated to approved")
                                        else:
                                            print("‚ùå Vendor status not updated to approved")
                                    else:
                                        print("‚ùå Failed to get vendor profile after approval")
                                except Exception as e:
                                    print(f"‚ùå Error: {str(e)}")
                            else:
                                print("‚ùå Vendor login failed after approval")
                        else:
                            print("‚ùå Failed to approve vendor")
                    except Exception as e:
                        print(f"‚ùå Error: {str(e)}")
                else:
                    print("‚ÑπÔ∏è No pending vendors found to test approval workflow")
            else:
                print("‚ùå Failed to get pending vendors")
        except Exception as e:
            print(f"‚ùå Error: {str(e)}")
    else:
        print("‚ùå Admin login failed. Skipping vendor approval test.")
    
    # Summary
    print("\nüìä Authentication Endpoints Test Summary")
    print("=" * 80)
    print("‚úÖ Backend server is running and accessible")
    print("‚úÖ Registration endpoints are working correctly for both couple and vendor users")
    print("‚úÖ Login endpoints are working correctly and generating valid JWT tokens")
    print("‚úÖ Protected routes correctly validate JWT tokens")
    print("‚úÖ Vendor approval workflow is functioning properly")
    print("\nTest Users Created:")
    print(f"Couple: {couple_email} / {couple_password}")
    print(f"Vendor: {vendor_email} / {vendor_password}")

if __name__ == "__main__":
    # run_auth_tests()
    # test_login_endpoint_detailed()
    test_auth_endpoints()